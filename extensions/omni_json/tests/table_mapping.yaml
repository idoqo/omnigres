$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
  - create extension omni_json
  - |
    create table example (
      id           integer primary key generated always as identity,
      first_name   text,
      last_name    text,
      dob          date
    )
  - insert into example (first_name, last_name, dob) values ('John', 'Doe', '12/12/71')
  - |
    create table users (
      id           integer primary key generated always as identity,
      email        text not null,
      password     text not null
    )


tests:

- name: default
  steps:
  - query: select omni_json.define_table_mapping('example')
  - query: select to_jsonb(example.*) from example
    results:
    - to_jsonb:
        id: 1
        dob: 1971-12-12
        first_name: John
        last_name: Doe
  - query: select jsonb_populate_record(null::example, to_jsonb(example.*)) = example as equal from example
    results:
    - equal: true

- name: exclusion
  steps:
  - query: select omni_json.define_table_mapping('example', $1::jsonb)
    params:
    - columns:
        dob:
          exclude: true
  - query: select to_jsonb(example.*) from example
    results:
    - to_jsonb:
        id: 1
        first_name: John
        last_name: Doe
  - query: select (jsonb_populate_record(example.*, to_jsonb(example.*))).dob = example.dob as equal from example
    results:
    - equal: true

- name: exclusion on populating records
  steps:
  - query: select omni_json.define_table_mapping('example', $1::jsonb)
    params:
    - columns:
        dob:
          exclude: true
  - query: |
      select dob from jsonb_populate_record(null::example, '{"first_name": "Jane", "last_name": "Doe", "dob": "1981-12-12"}')
    results:
    - dob: null

- name: rename (with `path`)
  steps:
  - query: select omni_json.define_table_mapping('example', $1::jsonb)
    params:
    - columns:
        dob:
          path: date_of_birth
  - query: select to_jsonb(example.*) from example
    results:
    - to_jsonb:
        id: 1
        date_of_birth: 1971-12-12
        first_name: John
        last_name: Doe
  - query: select jsonb_populate_record(null::example, to_jsonb(example.*)) = example as equal from example
    results:
    - equal: true

- name: relocate (with `path`) to a sub-object
  steps:
  - query: select omni_json.define_table_mapping('example', $1::jsonb)
    params:
    - columns:
        first_name:
          path: ['name','first']
        last_name:
          path: [ 'name', 'last' ]
  - query: select to_jsonb(example.*) from example
    results:
    - to_jsonb:
        id: 1
        dob: 1971-12-12
        name:
          first: John
          last: Doe
  - query: select jsonb_populate_record(null::example, to_jsonb(example.*)) = example as equal from example
    results:
    - equal: true

- name: relocate (with `path`) to a sub-array
  steps:
  - query: select omni_json.define_table_mapping('example', $1::jsonb)
    params:
    - columns:
        first_name:
          path: ['name', 0]
        last_name:
          path: ['name', 1]
  - query: select to_jsonb(example.*) from example
    results:
    - to_jsonb:
        id: 1
        dob: 1971-12-12
        name:
          - John
          - Doe
  - query: select jsonb_populate_record(null::example, to_jsonb(example.*)) = example as equal from example
    results:
    - equal: true

- name: relocate (with `path`) to an array
  steps:
  - query: select omni_json.define_table_mapping('example', $1::jsonb)
    params:
    - columns:
        first_name:
          path: [0]
        last_name:
          path: [1]
  # FIXME: This is not perfect behavior. It currently makes these columns
  # simply vanish. Throw an error instead?
  - query: select to_jsonb(example.*) from example
    results:
    - to_jsonb:
        id: 1
        dob: 1971-12-12
  - query: select jsonb_populate_record(null::example, to_jsonb(example.*)) = example as equal from example
    results:
    # This is failing because of the FIXME issue above
    - equal: false

- name: converting back with pre-set values
  steps:
  - query: select omni_json.define_table_mapping('example')
  - query: select (jsonb_populate_record(row(example.id, 'Hello', 'World', example.dob)::example, '{}')).* from example
    results:
    - id: 1
      first_name: Hello
      last_name: World
      dob: 1971-12-12

- name: converting back with pre-set values from moved paths
  steps:
  - query: select omni_json.define_table_mapping('example', $1)
    params:
    - columns:
        first_name:
          path: [ 'name','first' ]
        last_name:
          path: [ 'name', 'last' ]
  - query: select (jsonb_populate_record(row(example.id, 'Hello', 'World', example.dob)::example, '{}')).* from example
    results:
    - id: 1
      first_name: Hello
      last_name: World
      dob: 1971-12-12

- name: updating
  steps:
  - query: select omni_json.define_table_mapping('example')
  - query: |
      update example set (dob, first_name, last_name) = (select dob, first_name, last_name from jsonb_populate_record(example.*, '{"dob": "1981-12-12"}'))
      returning example.*
    results:
    - id: 1
      first_name: John
      last_name: Doe
      dob: 1981-12-12

- name: inserting
  steps:
  - query: select omni_json.define_table_mapping('example')
  - query: |
      insert into example (dob, first_name, last_name) 
      (select dob, first_name, last_name from jsonb_populate_record(null::example, '{"first_name": "Jane", "last_name": "Doe", "dob": "1981-12-12"}'))
      returning example.*
    results:
    - id: 2
      first_name: Jane
      last_name: Doe
      dob: 1981-12-12

- name: exclusion
  steps:
  - query: select omni_json.define_table_mapping('example', $1::jsonb)
    params:
    - columns:
        dob:
          exclude: true
  - query: select to_jsonb(example.*) from example
    results:
    - to_jsonb:
        id: 1
        first_name: John
        last_name: Doe
  - query: select (jsonb_populate_record(example.*, to_jsonb(example.*))).dob = example.dob as equal from example
    results:
    - equal: true

- name: transformations
  tests:
  - name: input
    tests:
    - name: text type
      steps:
      - |
        create function encrypt_password(password text) returns text language sql as
        $$
          select 'encrypted_password_text'
        $$
      - query: select omni_json.define_table_mapping('users', $1::jsonb)
        params:
        - columns:
            password:
              transform:
                input:
                  type: text
                  function: encrypt_password
      - query: select (jsonb_populate_record(null::users, to_jsonb(row(null, null, 'password')::users))).password
        results:
        - password: encrypted_password_text
    - name: jsonb type
      steps:
      - |
        create function encrypt_password(password jsonb) returns text language sql as
        $$
          select 'encrypted_password_jsonb'
        $$
      - query: select omni_json.define_table_mapping('users', $1::jsonb)
        params:
        - columns:
            password:
              transform:
                input:
                  type: jsonb
                  function: encrypt_password
      - query: select (jsonb_populate_record(null::users, to_jsonb(row(null, null, 'password')::users))).password
        results:
        - password: encrypted_password_jsonb
    - name: json type
      steps:
      - |
        create function encrypt_password(password json) returns text language sql as
        $$
          select 'encrypted_password_json'
        $$
      - query: select omni_json.define_table_mapping('users', $1::jsonb)
        params:
        - columns:
            password:
              transform:
                input:
                  type: json
                  function: encrypt_password
      - query: select (jsonb_populate_record(null::users, to_jsonb(row(null, null, 'password')::users))).password
        results:
        - password: encrypted_password_json
    - name: moved fields
      steps:
      - |
        create function encrypt_password(password text) returns text language sql as
        $$
          select 'encrypted_password_text'
        $$
      - query: select omni_json.define_table_mapping('users', $1::jsonb)
        params:
        - columns:
            password:
              path: [ "private", "password" ]
              transform:
                input:
                  type: text
                  function: encrypt_password
      - query: |
          select (jsonb_populate_record(null::users, '{"private": {"password": "pwd"}}')).password
        results:
        - password: encrypted_password_text
  - name: output
    tests:
    - name: text
      steps:
      - |
        create function mask_password(password text) returns text language sql as
        $$
          select 'HIDDEN'
        $$
      - query: select omni_json.define_table_mapping('users', $1::jsonb)
        params:
        - columns:
            password:
              transform:
                output:
                  type: text
                  function: mask_password

      - query: |
          select to_jsonb(row(1, 'foo@bar.com', 'password')::users)->'password' as password
        results:
        - password: HIDDEN
    - name: jsonb
      steps:
      - |
        create function mask_password(password text) returns jsonb language sql as
        $$
          select '{"value": "hidden"}'::jsonb
        $$
      - query: select omni_json.define_table_mapping('users', $1::jsonb)
        params:
        - columns:
            password:
              transform:
                output:
                  type: jsonb
                  function: mask_password

      - query: |
          select (to_jsonb(row(1, 'foo@bar.com', 'password')::users)->'password') as password
        results:
        - password:
            value: hidden
    - name: json
      steps:
      - |
        create function mask_password(password text) returns json language sql as
        $$
          select '{"value": "hidden"}'::json
        $$
      - query: select omni_json.define_table_mapping('users', $1::jsonb)
        params:
        - columns:
            password:
              transform:
                output:
                  type: json
                  function: mask_password

      - query: |
          select (to_jsonb(row(1, 'foo@bar.com', 'password')::users)->'password') as password
        results:
        - password:
            value: hidden
    - name: moved fields
      steps:
      - |
        create function mask_password(password text) returns text language sql as
        $$
          select 'HIDDEN'
        $$
      - query: select omni_json.define_table_mapping('users', $1::jsonb)
        params:
        - columns:
            password:
              path: [ "private","password" ]
              transform:
                output:
                  type: text
                  function: mask_password

      - query: |
          select to_jsonb(row(1, 'foo@bar.com', 'password')::users)->'private' as private
        results:
        - private:
            password: HIDDEN
