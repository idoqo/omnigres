$schema: "https://raw.githubusercontent.com/omnigres/omnigres/master/pg_yregress/schema.json"
instance:
  init:
  - create extension omni_python cascade
  - insert
    into
        omni_python.config (name, value)
    values
        ('pip_find_links', '../../../python-wheels'),
        ('site_packages', 'omni_python_test_functions')
  - select omni_python.install_requirements('omni_python')

tests:

- name: attempts to do top-level imports # should fail on wrong imports. that's how we know
  query: select * from omni_python.create_functions($1)
  params:
  #language=Python
  - |
    import thisdoesnotexist
  error: "ModuleNotFoundError: No module named 'thisdoesnotexist'"

- name: fails on syntax errors
  query: select *
         from
             omni_python.create_functions($1)
  params:
  #language=Python
  - |
    from omni_python import pg
    from a import c.b
    
    
    @pg
    def fun() -> int:
        pass
  error: "SyntaxError: invalid syntax (unnamed.py, line 2)"

- name: imperative loading
  steps:
  - query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      def my_fun(f):
        return f
      @my_fun
      @pg
      def fun1(v: str) -> int:
        return len(v)
    results:
    - create_functions: fun1(text)

- name: create multiple @pg functions
  steps:
  - query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      @pg
      def fun1(v: str) -> int:
        return len(v)
      @pg
      def fun2(v: str) -> str:
        return v[::-1]
    results:
    - create_functions: fun1(text)
    - create_functions: fun2(text)
  - query: select fun1('test')
    results:
    - fun1: 4
  - query: select fun2('test')
    results:
    - fun2: tset

- name: override @pg name
  steps:
  - query: select *
           from
               omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      
      
      @pg(name="fun")
      def fun1(v: str) -> int:
          return len(v)
    results:
    - create_functions: fun(text)
  - query: select fun('test')
    results:
    - fun: 4

- name: ignores non-@pg functions
  steps:
  - query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      @pg
      def fun1(v: str) -> int:
        return len(v)
      def fun2(v: str) -> str:
        return v[::-1]
    results:
    - create_functions: fun1(text)

- name: allow optional types for NULL-compatibility
  steps:
  - query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      import typing
      
      @pg
      def fun1(v: typing.Optional[str]) -> typing.Optional[int]:
        if v is None:
          return None
        else:
          return len(v)
      @pg
      def fun2(v: typing.Optional[str]) -> typing.Optional[str]:
        if v is None:
          return None
        else:
          return v[::-1]
    results:
    - create_functions: fun1(text)
    - create_functions: fun2(text)
  - query: select fun1('test')
    results:
    - fun1: 4
  - query: select fun2('test')
    results:
    - fun2: tset
  - query: select fun1(null)
    results:
    - fun1: null
  - query: select fun2(null)
    results:
    - fun2: null

- name: not replacing existing function
  steps:
  - name: create
    query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      @pg
      def fun1(v: str) -> int:
        return len(v)
    results:
    - create_functions: fun1(text)
  - name: create again
    query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      @pg
      def fun1(v: str) -> int:
        return 0
    error: function "fun1" already exists with same argument types

- name: replacing existing function if instructed to do so
  steps:
  - name: create
    query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      @pg
      def fun1(v: str) -> int:
        return len(v)
    results:
    - create_functions: fun1(text)
  - name: create again
    query: select * from omni_python.create_functions($1, replace => true)
    params:
    #language=Python
    - |
      from omni_python import pg
      @pg
      def fun1(v: str) -> int:
        return 0
  - name: try it
    query: select fun1('test')
    results:
    - fun1: 0

- name: add existing function with a different signature
  steps:
  - name: create
    query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      @pg
      def fun1(v: str) -> int:
        return len(v)
    results:
    - create_functions: fun1(text)
  - name: create again
    query: select * from omni_python.create_functions($1)
    params:
    #language=Python
    - |
      from omni_python import pg
      @pg
      def fun1(v: int) -> int:
        return 0
    results:
    - create_functions: fun1(integer)
  - name: try it
    query: select fun1(0)
    results:
    - fun1: 0

- name: executing function doesn't re-execute the whole file
  steps:
  - name: create
    query: select * from omni_python.create_functions($1)
    notices:
    - executed
    params:
    #language=Python
    - |
      from omni_python import pg, log
      log.notice('executed')
      @pg
      def fun1(v: str) -> int:
        return len(v)
    results:
    - create_functions: fun1(text)
  - name: execute it
    query: select fun1('test')
    notices: [ ]